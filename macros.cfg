#####################################################################
#   Macros
#####################################################################
[bed_mesh]
zero_reference_position: 175, 175 # pouzijte stred vasi velikosti podlozky
#    set this to the middle of your bed
speed: 200
#    movement speed of toolhead during bed mesh
horizontal_move_z: 5
#    height of scanner during bed mesh scan
mesh_min: 40, 40 # pouzijte vasi velikosti podlozky
#    start point of bed mesh [X, Y]
mesh_max: 310, 288 # pouzijte vasi velikosti podlozky
#    end point of bed mesh [X, Y]
probe_count: 11, 11 # klidne nastavte 30, 30
algorithm: bicubic

[gcode_macro QGL]
gcode:
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    G90
    G0 X175 Y175 Z30 F10800
    STATUS_READY
    #--------------------------------------------------------------------

[homing_override]
axes: xyz
gcode:
  {% set tilted = printer.quad_gantry_level.applied|default("false")|lower %}

  {% if tilted == "false" %}
      SET_KINEMATIC_POSITION Z=0
      G91
      G1 Z5 F1200
  {% endif %}

  {% set home_all = 'X' not in params and 'Y' not in params and 'XY' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params or 'XY' in params %}
    _HOME_X
  {% endif %}

  {% if home_all or 'Y' in params or 'XY' in params %}
    _HOME_Y
  {% endif %}

  {% if home_all or 'Z' in params %}
    G90
    G1 X175 Y175 F6600 ## toto je pro 350 verzi, přepište si zde vaši velikost, jinak to nebude dělat home uprostřed
    G28 Z
    G1 Z10
  {% endif %}


########################################
# Filament runout switch sensor
########################################

#[filament_switch_sensor filament_sensor]
#pause_on_runout: true
#runout_gcode:
#  M117 Runout Detected
#insert_gcode:
#  M117 Insert Detected
#event_delay: 3.0
#pause_delay: 0.5
#switch_pin: ^sb2040:gpio25   #29   


 #####################################################################
#   print_start macro
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # Fetch parameters from slicer or defaults
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set S_EXTRUDER_TEMP = 150|float %}       # Default nozzle preheat temperature
  {% set initial_tool = params.TOOL|default("0")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Turn on lights
  LIGHTS_10

  # Home all axes and set positioning modes
  STATUS_HOMING         # Set LEDs to homing mode
  G28                   # Full homing (X, Y, Z)
  G90                   # Set absolute positioning
  M83                   # Set extruder to relative mode

  # Move to cleaning position with safe Z height
  G1 X85 Y357 Z10 F6000  ; Move to nozzle cleaning position (Z10 = safe height)
  STATUS_CLEANING       # Set LEDs to cleaning mode
  CLEAN_NOZZLE_GANTRY   # Perform nozzle cleaning routine

  # Move nozzle slightly for filament cutting
  G91                   # Switch to relative positioning
  G1 Y-20 F6000         # Move Y axis backward by 20mm
  G90                   # Back to absolute positioning
  G28 Z                 # Home Z axis only after cleaning

  # Clear old bed mesh data
  BED_MESH_CLEAR       

  # Bed heating and heat soak if bed temp > 90°C
  {% if target_bed > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"  # Display bed temp
    STATUS_HEATING                             # LEDs heating mode
    M106 S255                                  # Turn on part cooling fan at full speed (adjust if needed)

    # Uncomment the next line if you have Nevermore board
    # SET_PIN PIN=nevermore VALUE=1          

    G1 X{x_wait} Y{y_wait} Z15 F9000          # Move to bed center with safe Z height
    M190 S{target_bed}                        # Wait for bed to reach target temperature
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display chamber heat soak temp
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}  # Wait for chamber temp
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"  # Display bed temp
    STATUS_HEATING                             # LEDs heating mode
    G1 X{x_wait} Y{y_wait} Z15 F9000           # Move to bed center with safe Z height
    M190 S{target_bed}                         # Wait for bed temperature
    # Optional soak:
    # SET_DISPLAY_TEXT MSG="Soak for 5min"
    # G4 P300000                             # Dwell 5 minutes for temp stabilization
  {% endif %}

  # Heat nozzle to initial preheat temperature for Z homing
  SET_DISPLAY_TEXT MSG="Hotend: 150c"       # Display nozzle preheat temp
  M109 S{S_EXTRUDER_TEMP}                   # Wait for nozzle to reach 150°C (or value set in S_EXTRUDER_TEMP)

  # Perform quad gantry level (QGL) for V2 printers
  SET_DISPLAY_TEXT MSG="QGL"                 # Display leveling status
  STATUS_LEVELING                            # LEDs leveling mode
  quad_gantry_level                          # Execute quad gantry leveling
  G28 Z                                      # Home Z again after leveling

  # Bed mesh calibration (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"            # Display bed mesh status
  STATUS_MESHING                             # LEDs bed mesh mode
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5  # Start bed mesh calibration
  CARTOGRAPHER_TOUCH                        # Calibrate Z offset using nozzle touch probe

  # Heat nozzle to target printing temperature from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"  # Display target nozzle temp
  STATUS_HEATING                            # LEDs heating mode
  M109 S{target_extruder}                   # Wait for nozzle temp
  
  T{initial_tool}
  

  # Ready to start printing
  SET_DISPLAY_TEXT MSG="Printer goes brr"  # Display start message
  STATUS_PRINTING                           # LEDs printing mode

  # Move to purge start position and set initial Z height
  G0 X{x_wait - 50} Y4 F10000               # Move to purge start position
  G0 Z0.4                                   # Set Z height to 0.4 mm

  # Reset extruder position and perform purge line with wipe
  G92 E0                                   # Reset extruder position
  G91                                      # Switch to relative positioning
  G1 X100 E20 F1000                        # Purge line: extrude 20 mm filament while moving X 100 mm
  G1 E-0.5 F3000                           # Retract filament slightly to prevent oozing
  G1 X5 F1000                              # Wipe forward to break stringing
  G1 X-5 F1000                             # Wipe backward
  G90                                      # Switch back to absolute positioning

  M117 Printing...                         # Display "Printing..." on LCD



[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M221 S100 ; set speed back to if speedup print 100%
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 100, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3000                ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2}
    #G91
    #G1 Z50 F900
    #G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    ##STATUS_CLEANING
    ##G1 X75 Y350 Z10 F3600        ; Move to purge bucket location 
    #CLEAN_NOZZLE
    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    # disable lights
    LIGHTS_OFF
    STATUS_READY


    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

      
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}
    
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

# Conditional G28 (home if not already homed)

[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}
    
# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro BACKUP_CFG]
 description: Backs up config directory GitHub
 gcode:
     RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    #STATUS_PRINTING
    #G1 Z80 F100000
    G1 X250 Y50 F100000    # move up and to front/center to straighten filament path
    G1 E35 F300            # extrude filament through into hotend
    G1 E15 F240            # slowly extrude through hotend to partially purge previous filament
    G1 E-15.0 F100000      # retract filament
    M82                    # set extruder to absolute extrusion

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    #G1 Z80 F100000         
    G1 X250 Y50 F100000    # move up and to front/center to straighten filament path
    G1 E3  F300            # extrude slowly to soften tip of filament
    G1 E-30 F100000        # quickly yank filament back clear of hotend
    G1 E-80 F1800          # ensure filament is clear of extruder gears
    M82                    # set extruder to absolute extrusion

[gcode_macro M600]
gcode:
    {% set X = params.X|default(350)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro PURGE_LINE]
gcode:

  G0 X340 Y50 F3000             ; Go to side
  G0 Z0.25                      ;
  G1 E15 F200                   ; purge blob
  G92 E0                        ; zero the extruded length
  G1 Y330 E7.5 F800             ; Extrude purge line
#  G1 Y300 E-.1 F800            ; Retract while wiping on purged line
  G1 Z4 
  
[gcode_macro CLEAN_NOZZLE_GANTRY]
gcode:
  SAVE_GCODE_STATE NAME=clean_nozzle_gantry
  G90
  G1 Z5 F600                   ; zvednutí na bezpečnou výšku
  G1 X89 Y354 F18000          ; startovní pozice
  G1 X125 F18000              ; přejezd doprava
  G1 X85 F18000               ; přejezd doleva
  G1 X125 F18000              ; doprava
  G1 X85 F18000               ; doleva
  RESTORE_GCODE_STATE NAME=clean_nozzle_gantry
  STATUS_READY
   
[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=1.0

[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0

[gcode_macro lights_10]
gcode:
    SET_PIN PIN=caselight VALUE=0.1


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}